const mix = require('laravel-mix');
require('mix-tailwindcss');
require('@tinypixelco/laravel-mix-wp-blocks');
require('laravel-mix-purgecss');
require('laravel-mix-copy-watched');
require('laravel-mix-export-tailwind-config');

const purgecssWordpress = require('purgecss-with-wordpress');

/*
 |--------------------------------------------------------------------------
 | Mix Asset Management â€“ https://laravel-mix.com
 |--------------------------------------------------------------------------
 |
 | Mix provides a clean, fluent API for defining some Webpack build steps
 | for your Stage application. By default, we are compiling the Sass file
 | for your application, as well as bundling up your JS files.
 |
 */

// Public Path & Development Domain
mix.setPublicPath('./dist')
  .browserSync({
        proxy: 'stage.test',
        port: '1984',
    });

// JavaScript
// Todo: .extract() is removed: https://github.com/roots/sage/issues/2204
// So there is no manifest.js file available
mix.js('resources/assets/scripts/app.js', 'scripts')
  .blocks('resources/assets/scripts/editor.js', 'scripts');

// Styles
mix.sass('resources/assets/styles/app.scss', 'styles')
  .sass('resources/assets/styles/editor.scss', 'styles')
  .tailwind('./../stage/tailwind.config.js');

// Assets
mix.copyWatched('resources/assets/images', 'dist/images')
  .copyWatched('resources/assets/icons', 'dist/icons')
  .copyWatched('resources/assets/fonts', 'dist/fonts')
  .copyWatched('resources/languages', 'dist/languages');

// Autoload
mix.autoload({
    jquery: ['$', 'window.jQuery'],
});

// Remove unused styles in production
mix.purgeCss({
    content: [
    './app/**/*.php',
    '../stage/include/**/*.php',
    './resources/views/**/*.php',
    '../stage/resources/views/**/*.php',
    './resources/assets/**/*.js',
    '../stage/resources/assets/**/*.js',
    ],

    defaultExtractor: content => content.match(/[A-Za-z0-9-_:/]+/g) || [],

    // Add classes, IDs, or selectors which do not exist in your views or scripts.
    // By default, we have whitelisted classes generated by WordPress and used by Stage.
    safelist: [
      ...purgecssWordpress.safelist,

      'up',
      'down',
      'cite',
      'figure',
      'overlay',
      'active',
      'grid-item',
      'post-inner',
      'featured-image',
      'image-container',
      'off-canvas-menu',

      /^wp(-.*)?$/,
      /^is(-.*)?$/,
      /^has(-.*)?$/,
      /^align(.*)?$/,
      /^blocks(-.*)?$/,
      /^stage(-.*)?$/,
    ]
});

// Options
mix.options({
    processCssUrls: false,
});

// Generate source maps when not in production
mix.sourceMaps(false, 'source-map')
  .version();
